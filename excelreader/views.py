from django.shortcuts import render
from .forms import UploadFileForm
from .models import ExcelRow, UploadedFile
import pandas as pd
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .serializers import ExcelRowSerializer, UploadedFileSerializer

from django.views.decorators.csrf import csrf_exempt
from django.http import JsonResponse
import traceback

@csrf_exempt
def upload_file(request):
    if request.method == 'POST' and request.FILES.get('file'):
        file = request.FILES['file']
        print(f"üìÅ Nh·∫≠n file: {file.name}")

        # Ghi th√¥ng tin file upload v√†o DB
        uploaded_file = UploadedFile.objects.create(filename=file.name)

        try:
            # ƒê·ªçc file Excel
            if file.name.endswith('.xlsx'):
                print("üìÑ ƒê·ªçc Excel b·∫±ng pandas")
                df = pd.read_excel(file)

            # ƒê·ªçc file CSV c√≥ ti·∫øng Vi·ªát
            elif file.name.endswith('.csv'):
                print("üìÑ ƒê·ªçc CSV (∆∞u ti√™n UTF-8, fallback latin1)")
                try:
                    df = pd.read_csv(file, encoding='utf-8')
                except UnicodeDecodeError:
                    print("‚ö†Ô∏è UTF-8 l·ªói, th·ª≠ latin1")
                    df = pd.read_csv(file, encoding='latin1')

            else:
                return JsonResponse({'error': 'Ch·ªâ h·ªó tr·ª£ .xlsx v√† .csv'}, status=400)

            print(f"‚úÖ S·ªë d√≤ng ƒë·ªçc ƒë∆∞·ª£c: {len(df)}")
            print(f"üìå C·ªôt: {df.columns.tolist()}")

            # Ghi t·ª´ng d√≤ng v√†o ExcelRow
            for i, row in df.iterrows():
                cleaned = row.where(pd.notnull(row), None).to_dict()
                ExcelRow.objects.create(
                    file=uploaded_file,
                    data=cleaned,
                    row_number=i + 1
                )

            return JsonResponse({'success': True})

        except Exception as e:
            print("‚ùå L·ªói khi x·ª≠ l√Ω file:")
            traceback.print_exc()
            return JsonResponse({'error': str(e)}, status=500)

    return JsonResponse({'error': 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá'}, status=400)


# API: Danh s√°ch file ƒë√£ upload
@api_view(['GET'])
def get_uploaded_files(request):
    files = UploadedFile.objects.all().order_by('-uploaded_at')
    serializer = UploadedFileSerializer(files, many=True)
    return Response(serializer.data)


# API: L·∫•y d·ªØ li·ªáu t·ª´ng d√≤ng theo file
@api_view(['GET'])
def get_rows_by_file(request, file_id):
    rows = ExcelRow.objects.filter(file_id=file_id).order_by('row_number')
    serializer = ExcelRowSerializer(rows, many=True)
    return Response(serializer.data)

## API visualization
@api_view(['GET'])
def token_report_api(request):
    try:
        # ‚úÖ T√¨m file theo t√™n (ho·∫∑c sau n√†y c√≥ th·ªÉ d√πng file_id)
        target_filename = '20250428084607-data.xlsx'
        file_obj = UploadedFile.objects.filter(filename=target_filename).first()

        if not file_obj:
            return JsonResponse({'error': 'Kh√¥ng t√¨m th·∫•y file trong DB'}, status=404)

        # ‚úÖ L·∫•y t·∫•t c·∫£ d√≤ng thu·ªôc file ƒë√≥
        rows = ExcelRow.objects.filter(file=file_obj)

        if not rows.exists():
            return JsonResponse({'error': 'Kh√¥ng c√≥ d√≤ng d·ªØ li·ªáu cho file n√†y'}, status=404)

        # ‚úÖ T·∫°o DataFrame t·ª´ JSONField "data"
        df = pd.DataFrame([row.data for row in rows])

        # ‚úÖ X·ª≠ l√Ω th·ªëng k√™ nh∆∞ c≈©
        df["Th·ªùi giant·∫°o"] = pd.to_datetime(df["Th·ªùi giant·∫°o"])

        browsers = df["Tr√¨nh duy·ªát"].value_counts().reset_index().values.tolist()
        platforms = df["N·ªÅn t·∫£ng"].value_counts().reset_index().values.tolist()
        regions = df["Region"].value_counts().reset_index().values.tolist()

        by_day = df["Th·ªùi giant·∫°o"].dt.date.value_counts().sort_index().reset_index()
        by_day.columns = ["date", "count"]
        created_per_day = by_day.values.tolist()

        return Response({
            'browsers': browsers,
            'platforms': platforms,
            'regions': regions,
            'created_per_day': created_per_day
        })

    except Exception as e:
        traceback.print_exc()
        return JsonResponse({'error': str(e)}, status=500)
    
## API Delete
@api_view(['DELETE'])
def delete_multiple_files(request):
    ids = request.data.get('ids', [])
    if not ids:
        return Response({'error': 'Danh s√°ch ID r·ªóng.'}, status=400)

    files = UploadedFile.objects.filter(id__in=ids)
    deleted = files.count()
    files.delete()
    return Response({'message': f'ƒê√£ xo√° {deleted} file.'})
